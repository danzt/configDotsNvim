
bind - handle fish key bindings

   bind [(-M | --mode) MODE] [(-m | --sets-mode) NEW_MODE] [--preset | --user] [(-s | --silent)] [(-k | --key)] SEQUENCE COMMAND [COMMAND...]
   bind [(-M | --mode) MODE] [(-k | --key)] [--preset] [--user] SEQUENCE
   bind (-K | --key-names) [(-a | --all)] [--preset] [--user]
   bind (-f | --function-names)
   bind (-L | --list-modes)
   bind (-e | --erase) [(-M | --mode) MODE] [--preset] [--user] (-a | --all | [(-k | --key)] SEQUENCE [SEQUENCE...])

[1mDESCRIPTION[0m
[1mbind[0m  adds  a  binding for the specified key sequence to
the specified command.

SEQUENCE is the character sequence  to  bind  to.  These
should be written as fish escape sequences. For example,
because pressing the Alt key and another character sends
that   character  prefixed  with  an  escape  character,
Alt-based key bindings can be written using the  [1m\e[0m  es‚Äê
cape. For example, [1mAlt+w[0m can be written as [1m\ew[0m. The con‚Äê
trol character can be written in much the same way using
the [1m\c[0m escape, for example [1mControl+X[0m (^X) can be written
as [1m\cx[0m. Note that Alt-based key bindings are case sensi‚Äê
tive  and  Control-based key bindings are not. This is a
constraint of text-based terminals, not [1mfish[0m.

The default key binding can be set by specifying  a  [1mSE‚Äê[0m
[1mQUENCE[0m  of  the  empty string (that is, [1m''[0m ). It will be
used whenever no other binding  matches.  For  most  key
bindings, it makes sense to use the [1mself-insert[0m function
(i.e. [1mbind[0m [1m''[0m [1mself-insert[0m) as  the  default  keybinding.
This  will  insert any keystrokes not specifically bound
to into the editor. Non- printable  characters  are  ig‚Äê
nored  by the editor, so this will not result in control
sequences being printable.

If the [1m-k[0m switch is used, the name of the key  (such  as
'down',  'up'  or  'backspace') is used instead of a se‚Äê
quence. The names used are the same as the corresponding
curses  variables,  but  without the 'key_' prefix. (See
[1mterminfo(5)[0m  for   more   information,   or   use   [1mbind[0m
[1m--key-names[0m  for a list of all available named keys.) If
used in  conjunction  with  the  [1m-s[0m  switch,  [1mbind[0m  will
silently  ignore  bindings  to  named  keys that are not
found in termcap for the current [1m$TERMINAL[0m, otherwise  a
warning is emitted.

[1mCOMMAND[0m  can be any fish command, but it can also be one
of a set of special input functions. These include func‚Äê
tions for moving the cursor, operating on the kill-ring,
performing  tab  completion,  etc.  Use   [1mbind[0m   [1m--func‚Äê[0m
[1mtion-names[0m for a complete list of these input functions.

When  [1mCOMMAND[0m  is  a  shellscript  command, it is a good
practice to put the actual code into a [4mfunction[24m and sim‚Äê
ply  bind to the function name. This way it becomes sig‚Äê
nificantly easier to test the  function  while  editing,
and the result is usually more readable as well.

If a script produces output, it should finish by calling
[1mcommandline[0m [1m-f[0m [1mrepaint[0m to tell fish that a repaint is in
order.

When multiple [1mCOMMAND[0ms are provided, they are all run in
the specified order when the key is pressed.  Note  that
special input functions cannot be combined with ordinary
shell script commands. The commands must be  entirely  a
sequence  of  special  input functions (from [1mbind[0m [1m-f[0m) or
all shell script commands (i.e., valid fish script).

If no [1mSEQUENCE[0m is provided, all bindings  (or  just  the
bindings in the specified [1mMODE[0m) are printed. If [1mSEQUENCE[0m
is provided without [1mCOMMAND[0m, just the  binding  matching
that sequence is printed.

To save custom keybindings, put the [1mbind[0m statements into
config.fish. Alternatively, fish also automatically exe‚Äê
cutes a function called [1mfish[0m[4m_[24m[1muser[0m[4m_[24m[1mkey[0m[4m_[24m[1mbindings[0m if it ex‚Äê
ists.

Key bindings may use "modes", which  mimics  Vi's  modal
input behavior. The default mode is "default", and every
bind  applies  to  a  single  mode.  The  mode  can   be
viewed/changed with the [1m$fish[0m[4m_[24m[1mbind[0m[4m_[24m[1mmode[0m variable.

The following parameters are available:

‚Ä¢ [1m-k[0m  or  [1m--key[0m  Specify  a  key name, such as 'left' or
  'backspace' instead of a character sequence

‚Ä¢ [1m-K[0m or [1m--key-names[0m Display  a  list  of  available  key
  names. Specifying [1m-a[0m or [1m--all[0m includes keys that don't
  have a known mapping

‚Ä¢ [1m-f[0m or [1m--function-names[0m Display a list of available in‚Äê
  put functions

‚Ä¢ [1m-L[0m  or  [1m--list-modes[0m  Display  a  list of defined bind
  modes

‚Ä¢ [1m-M[0m [1mMODE[0m or [1m--mode[0m [1mMODE[0m Specify a bind  mode  that  the
  bind is used in. Defaults to "default"

‚Ä¢ [1m-m[0m [1mNEW[0m[4m_[24m[1mMODE[0m or [1m--sets-mode[0m [1mNEW[0m[4m_[24m[1mMODE[0m Change the current
  mode to [1mNEW[0m[4m_[24m[1mMODE[0m after this binding is executed

‚Ä¢ [1m-e[0m or [1m--erase[0m Erase the binding  with  the  given  se‚Äê
  quence  and mode instead of defining a new one. Multi‚Äê
  ple sequences can be specified with this flag.  Speci‚Äê
  fying  [1m-a[0m  or [1m--all[0m with [1m-M[0m or [1m--mode[0m erases all binds
  in the given mode regardless of  sequence.  Specifying
  [1m-a[0m  or  [1m--all[0m without [1m-M[0m or [1m--mode[0m erases all binds in
  all modes regardless of sequence.

‚Ä¢ [1m-a[0m or [1m--all[0m See [1m--erase[0m and [1m--key-names[0m

‚Ä¢ [1m--preset[0m and [1m--user[0m specify if bind should operate  on
  user or preset bindings. User bindings take precedence
  over preset bindings when fish looks up  mappings.  By
  default, all [1mbind[0m invocations work on the "user" level
  except for listing, which will show both  levels.  All
  invocations  except for inserting new bindings can op‚Äê
  erate on both levels at the same time. [1m--preset[0m should
  only  be  used in full binding sets (like when working
  on [1mfish[0m[4m_[24m[1mvi[0m[4m_[24m[1mkey[0m[4m_[24m[1mbindings[0m).

[1mSPECIAL[0m [1mINPUT[0m [1mFUNCTIONS[0m
The following special input functions are available:

‚Ä¢ [1mand[0m, only execute the next function  if  the  previous
  succeeded (note: only some functions report success)

‚Ä¢ [1maccept-autosuggestion[0m,  accept the current autosugges‚Äê
  tion completely

‚Ä¢ [1mbackward-char[0m, moves one character to the left

‚Ä¢ [1mbackward-bigword[0m, move one  whitespace-delimited  word
  to the left

‚Ä¢ [1mbackward-delete-char[0m,  deletes  one character of input
  to the left of the cursor

‚Ä¢ [1mbackward-kill-bigword[0m, move  the  whitespace-delimited
  word to the left of the cursor to the killring

‚Ä¢ [1mbackward-kill-line[0m, move everything from the beginning
  of the line to the cursor to the killring

‚Ä¢ [1mbackward-kill-path-component[0m, move one path  component
  to the left of the cursor to the killring. A path com‚Äê
  ponent is everything likely to belong to a path compo‚Äê
  nent,  i.e. not any of the following: [4m/={,}'":@[24m [4m|;<>&[24m,
  plus newlines and tabs.

‚Ä¢ [1mbackward-kill-word[0m, move the word to the left  of  the
  cursor  to the killring. The "word" here is everything
  up to punctuation or whitespace.

‚Ä¢ [1mbackward-word[0m, move one word to the left

‚Ä¢ [1mbeginning-of-buffer[0m, moves to  the  beginning  of  the
  buffer, i.e. the start of the first line

‚Ä¢ [1mbeginning-of-history[0m,  move  to  the  beginning of the
  history

‚Ä¢ [1mbeginning-of-line[0m, move to the beginning of the line

‚Ä¢ [1mbegin-selection[0m, start selecting text

‚Ä¢ [1mcancel[0m, cancel the current commandline and replace  it
  with a new empty one

‚Ä¢ [1mcapitalize-word[0m,  make  the  current word begin with a
  capital letter

‚Ä¢ [1mcomplete[0m, guess the remainder of the current token

‚Ä¢ [1mcomplete-and-search[0m, invoke the  searchable  pager  on
  completion  options  (for convenience, this also moves
  backwards in the completion pager)

‚Ä¢ [1mdelete-char[0m, delete one character to the right of  the
  cursor

‚Ä¢ [1mdelete-or-exit[0m,  deletes one character to the right of
  the cursor or exits the shell if  the  commandline  is
  empty.

‚Ä¢ [1mdown-line[0m, move down one line

‚Ä¢ [1mdowncase-word[0m, make the current word lowercase

‚Ä¢ [1mend-of-buffer[0m,  moves  to  the end of the buffer, i.e.
  the end of the first line

‚Ä¢ [1mend-of-history[0m, move to the end of the history

‚Ä¢ [1mend-of-line[0m, move to the end of the line

‚Ä¢ [1mend-selection[0m, end selecting text

‚Ä¢ [1mexpand-abbr[0m expands any abbreviation  currently  under
  the cursor

‚Ä¢ [1mexecute[0m run the current commandline

‚Ä¢ [1mforward-bigword[0m, move one whitespace-delimited word to
  the right

‚Ä¢ [1mforward-char[0m, move one character to the right

‚Ä¢ [1mforward-word[0m, move one word to the right

‚Ä¢ [1mhistory-search-backward[0m, search the  history  for  the
  previous match

‚Ä¢ [1mhistory-search-forward[0m,  search  the  history  for the
  next match

‚Ä¢ [1mhistory-prefix-search-backward[0m, search the history for
  the previous prefix match

‚Ä¢ [1mhistory-prefix-search-forward[0m,  search the history for
  the next prefix match

‚Ä¢ [1mhistory-token-search-backward[0m, search the history  for
  the previous matching argument

‚Ä¢ [1mhistory-token-search-forward[0m,  search  the history for
  the next matching argument

‚Ä¢ [1mforward-jump[0m and [1mbackward-jump[0m, read another character
  and jump to its next occurence after/before the cursor

‚Ä¢ [1mforward-jump-till[0m   and  [1mbackward-jump-till[0m,  jump  to
  right [4mbefore[24m the next occurence

‚Ä¢ [1mrepeat-jump[0m and  [1mrepeat-jump-reverse[0m,  redo  the  last
  jump in the same/opposite direction

‚Ä¢ [1mkill-bigword[0m,  move the next whitespace-delimited word
  to the killring

‚Ä¢ [1mkill-line[0m, move everything from the cursor to the  end
  of the line to the killring

‚Ä¢ [1mkill-selection[0m, move the selected text to the killring

‚Ä¢ [1mkill-whole-line[0m, move the line to the killring

‚Ä¢ [1mkill-word[0m, move the next word to the killring

‚Ä¢ [1mpager-toggle-search[0m,  toggles  the search field if the
  completions pager is visible.

‚Ä¢ [1mrepaint[0m reexecutes the prompt  functions  and  redraws
  the  prompt.  Multiple  successive  repaints  are coa‚Äê
  lesced.

‚Ä¢ [1mrepaint-mode[0m reexecutes the fish_mode_prompt  function
  and redraws the prompt. This is useful for vi-mode. If
  no fish_mode_prompt exists, it acts like a normal  re‚Äê
  paint.

‚Ä¢ [1mforce-repaint[0m  reexecute  the prompt functions without
  coalescing.

‚Ä¢ [1msuppress-autosuggestion[0m, remove the  current  autosug‚Äê
  gestion

‚Ä¢ [1mswap-selection-start-stop[0m,  go to the other end of the
  highlighted text without changing the selection

‚Ä¢ [1mtranspose-chars[0m,  transpose two characters to the left
  of the cursor

‚Ä¢ [1mtranspose-words[0m,  transpose  two  words to the left of
  the cursor

‚Ä¢ [1mup-line[0m, move up one line

‚Ä¢ [1mupcase-word[0m, make the current word uppercase

‚Ä¢ [1myank[0m, insert the latest entry of the killring into the
  buffer

‚Ä¢ [1myank-pop[0m, rotate to the previous entry of the killring

[1mEXAMPLES[0m
   bind \cd 'exit'

Causes [1mfish[0m to exit when [1mControl+D[0m is pressed.

   bind -k ppage history-search-backward

Performs  a  history  search  when  the  [1mPage[0m  [1mUp[0m key is
pressed.

   set -g fish_key_bindings fish_vi_key_bindings
   bind -M insert \cc kill-whole-line force-repaint

Turns on Vi key bindings and rebinds [1mControl+C[0m to  clear
the input line.

[1mSPECIAL[0m [1mCASE:[0m [1mTHE[0m [1mESCAPE[0m [1mCHARACTER[0m
The  escape  key can be used standalone, for example, to
switch from insertion mode to normal mode when using  Vi
keybindings. Escape may also be used as a "meta" key, to
indicate the start of an escape sequence, such as  func‚Äê
tion  or arrow keys. Custom bindings can also be defined
that begin with an escape character.

fish waits for a period after receiving the escape char‚Äê
acter,  to determine whether it is standalone or part of
an  escape  sequence.  While  waiting,  additional   key
presses  make the escape key behave as a meta key. If no
other key presses come in, it is handled as a standalone
escape.  The  waiting  period is set to 300 milliseconds
(0.3 seconds) in the default key bindings  and  10  mil‚Äê
liseconds  in  the vi key bindings. It can be configured
by setting the [1mfish[0m[4m_[24m[1mescape[0m[4m_[24m[1mdelay[0m[4m_[24m[1mms[0m variable to a  value
between 10 and 5000 ms. It is recommended that this be a
universal variable that you set once from an interactive
session.

Note:  fish  2.2.0 and earlier used a default of 10 mil‚Äê
liseconds, and provided no way to configure it. That ef‚Äê
fectively  made  it  impossible  to use escape as a meta
key.
